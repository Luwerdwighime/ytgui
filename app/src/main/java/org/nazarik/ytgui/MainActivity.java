package org.nazarik.ytgui;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class MainActivity extends AppCompatActivity {

  // --- –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
  private static final String ENV_NAME = "ytgui-env";
  private static final String ENV_VERSION = "1.7.0"; // –í–µ—Ä—Å–∏—è —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  private static final String PYTHON_PATH = "bin/python3.12"; // –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Python
  private static final String FFMPEG_PATH = "bin/ffmpeg"; // –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É FFmpeg
  private static final String LD_LIBRARY_PATH = "lib"; // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏
  private static final int ZIP_SIZE = 143; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä ZIP-–∞—Ä—Ö–∏–≤–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö

  // --- –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
  private TextView consoleTextView;
  private Button nextButton;
  private ArrayList<String> ytDlpOptions; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ArrayList<String> –¥–ª—è –æ–ø—Ü–∏–π

  // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  private final ExecutorService executorService = Executors.newSingleThreadExecutor();

  // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MANAGE_EXTERNAL_STORAGE
  private ActivityResultLauncher<Intent> manageStoragePermissionLauncher;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    consoleTextView = findViewById(R.id.consoleTextView);
    consoleTextView.setMovementMethod(new ScrollingMovementMethod());
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    consoleTextView.post(() -> {
      final int scrollAmount = consoleTextView.getLayout().getLineTop(
          consoleTextView.getLineCount()) - consoleTextView.getHeight();
      if (scrollAmount > 0) {
        consoleTextView.scrollTo(0, scrollAmount);
      }
    });

    nextButton = findViewById(R.id.nextButton);
    nextButton.setEnabled(false); // –ö–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ActivityResultLauncher –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è MANAGE_EXTERNAL_STORAGE
    manageStoragePermissionLauncher = registerForActivityResult(
        new ActivityResultContracts.StartActivityForResult(),
        result -> {
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (Environment.isExternalStorageManager()) {
              appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–æ! ‚úÖ");
              startOperation();
            } else {
              appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ üò•");
              Toast.makeText(this, R.string.permission_denied_toast, Toast.LENGTH_LONG).show();
              nextButton.setEnabled(false);
            }
          }
        });

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ Intent, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (—Ä–µ–∂–∏–º –∑–∞–∫–∞—á–∫–∏)
    Intent intent = getIntent();
    if (intent != null && intent.hasExtra("options")) {
      ytDlpOptions = intent.getStringArrayListExtra("options"); // –ü–æ–ª—É—á–∞–µ–º ArrayList
      // –†–µ–∂–∏–º –∑–∞–∫–∞—á–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      checkAndRequestPermissions();
    } else {
      // –†–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      startOperation();
    }

    nextButton.setOnClickListener(v -> {
      Intent nextIntent = new Intent(this, DownloadActivity.class);
      startActivity(nextIntent);
      finish(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º MainActivity, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.
   * –î–ª—è Android 11 (API 30) –∏ –≤—ã—à–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç MANAGE_EXTERNAL_STORAGE.
   * –î–ª—è Android 9 (API 28) –∏ –Ω–∏–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç WRITE_EXTERNAL_STORAGE.
   */
  private void checkAndRequestPermissions() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
      // –î–ª—è Android 11 (API 30) –∏ –≤—ã—à–µ
      if (!Environment.isExternalStorageManager()) {
        appendLog("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üìÇ");
        Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
        Uri uri = Uri.fromParts("package", getPackageName(), null);
        intent.setData(uri);
        manageStoragePermissionLauncher.launch(intent);
      } else {
        appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ —É–∂–µ –µ—Å—Ç—å. ‚úÖ");
        startOperation();
      }
    } else {
      // –î–ª—è Android 9 (API 28) –∏ –Ω–∏–∂–µ
      if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
          != PackageManager.PERMISSION_GRANTED) {
        appendLog("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üìù");
        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1001);
      } else {
        appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –µ—Å—Ç—å. ‚úÖ");
        startOperation();
      }
    }
  }

  @Override
  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
      @NonNull int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if (requestCode == 1001) {
      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—É—á–µ–Ω–æ! ‚úÖ");
        startOperation();
      } else {
        appendLog("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ üò•");
        Toast.makeText(this, R.string.permission_denied_toast, Toast.LENGTH_LONG).show();
        nextButton.setEnabled(false);
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é MainActivity –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.
   */
  private void startOperation() {
    if (ytDlpOptions != null) {
      // –†–µ–∂–∏–º –∑–∞–∫–∞—á–∫–∏
      appendLog("–ó–∞–ø—É—Å–∫ yt-dlp... üöÄ");
      executeYtDlp();
    } else {
      // –†–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      appendLog(getString(R.string.environment_download_start, ENV_VERSION, ZIP_SIZE));
      downloadAndSetupEnvironment();
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –µ—ë –≤–Ω–∏–∑.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
   */
  private void appendLog(final String message) {
    runOnUiThread(() -> {
      consoleTextView.append(message + "\n");
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
      final int scrollAmount = consoleTextView.getLayout().getLineTop(
          consoleTextView.getLineCount()) - consoleTextView.getHeight();
      if (scrollAmount > 0) {
        consoleTextView.scrollTo(0, scrollAmount);
      }
    });
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ yt-dlp.
   */
  private void downloadAndSetupEnvironment() {
    executorService.execute(() -> {
      try {
        // –ü—É—Ç–∏
        File filesDir = getFilesDir();
        File envDir = new File(filesDir, ENV_NAME);
        File zipFile = new File(filesDir, "v" + ENV_VERSION + ".zip");
        String downloadUrl = "https://github.com/Luwerdwighime/ytgui-env/archive/refs/tags/v"
            + ENV_VERSION + ".zip";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        File pythonExecutable = new File(envDir, PYTHON_PATH);
        if (pythonExecutable.exists() && pythonExecutable.isFile() && pythonExecutable.canExecute()) {
          appendLog(getString(R.string.environment_already_installed, ENV_VERSION));
          runOnUiThread(() -> nextButton.setEnabled(true));
          return;
        }

        // 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
        URL url = new URL(downloadUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.connect();

        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
          throw new IOException("HTTP error code: " + connection.getResponseCode());
        }

        int totalFileSize = connection.getContentLength();
        if (totalFileSize <= 0) {
          // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
          totalFileSize = ZIP_SIZE * 1024 * 1024;
        }

        InputStream input = new BufferedInputStream(connection.getInputStream());
        OutputStream output = new FileOutputStream(zipFile);

        byte data[] = new byte[4096];
        long total = 0;
        int count;
        int lastProgress = 0;

        while ((count = input.read(data)) != -1) {
          total += count;
          output.write(data, 0, count);

          if (totalFileSize > 0) {
            int progress = (int) (total * 100 / totalFileSize);
            // –û—Ç–±–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 20% –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
            if (progress / 20 > lastProgress / 20 || (total >= totalFileSize && totalFileSize > 0) || progress == 100) {
              appendLog(getString(R.string.environment_download_progress, progress));
              lastProgress = progress;
            }
          }
        }
        output.flush();
        output.close();
        input.close();
        appendLog("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ‚úÖ");

        // 2. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
        appendLog(getString(R.string.environment_unzip_start));
        unzip(zipFile, filesDir);
        appendLog("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úÖ");

        // 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞
        File extractedDir = new File(filesDir, ENV_NAME + "-" + ENV_VERSION); // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        if (extractedDir.exists()) {
          if (envDir.exists()) {
            deleteRecursive(envDir); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          }
          if (!extractedDir.renameTo(envDir)) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É " + extractedDir.getAbsolutePath()
                + " –≤ " + envDir.getAbsolutePath());
          }
          appendLog("–ü–∞–ø–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞. ‚úÖ");
        } else {
          throw new IOException("–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + extractedDir.getAbsolutePath());
        }

        if (!zipFile.delete()) {
          Log.w("MainActivity", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ZIP-—Ñ–∞–π–ª: " + zipFile.getAbsolutePath());
        }
        appendLog("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã. ‚úÖ");

        // 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        File ffmpegExecutable = new File(envDir, FFMPEG_PATH);

        if (pythonExecutable.exists() && pythonExecutable.isFile()) {
          if (!pythonExecutable.setExecutable(true, false)) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Python.");
          }
        } else {
          throw new IOException("–§–∞–π–ª Python –Ω–µ –Ω–∞–π–¥–µ–Ω: " + pythonExecutable.getAbsolutePath());
        }

        if (ffmpegExecutable.exists() && ffmpegExecutable.isFile()) {
          if (!ffmpegExecutable.setExecutable(true, false)) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è FFmpeg.");
          }
        } else {
          appendLog(getString(R.string.ffmpeg_not_found_warning, ffmpegExecutable.getAbsolutePath()));
        }
        appendLog("–ë–∏—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. ‚úÖ");

        appendLog(getString(R.string.environment_setup_complete));
        runOnUiThread(() -> nextButton.setEnabled(true));

      } catch (Exception e) {
        Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + e.getMessage(), e);
        appendLog(getString(R.string.environment_setup_error, e.getMessage()) + " üò≠");
        runOnUiThread(() -> nextButton.setEnabled(false));
      }
    });
  }

  /**
   * –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
   *
   * @param zipFile –ê—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª.
   * @param targetDir –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
   * @throws IOException –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞.
   */
  private void unzip(File zipFile, File targetDir) throws IOException {
    try (ZipFile zip = new ZipFile(zipFile)) {
      Enumeration<? extends ZipEntry> entries = zip.entries();
      long totalBytes = 0;
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
      while (entries.hasMoreElements()) {
        ZipEntry entry = entries.nextElement();
        if (!entry.isDirectory()) {
          totalBytes += entry.getSize();
        }
      }

      entries = zip.entries(); // –°–±—Ä–æ—Å–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
      long extractedBytes = 0;
      int lastProgress = 0;

      while (entries.hasMoreElements()) {
        ZipEntry entry = entries.nextElement();
        File entryFile = new File(targetDir, entry.getName());

        if (entry.isDirectory()) {
          if (!entryFile.isDirectory() && !entryFile.mkdirs()) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + entryFile.getAbsolutePath());
          }
        } else {
          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          File parent = entryFile.getParentFile();
          if (parent != null && !parent.isDirectory() && !parent.mkdirs()) {
            throw new IOException(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞: " + entryFile.getAbsolutePath());
          }

          try (InputStream is = zip.getInputStream(entry); // –ü–æ–ª—É—á–∞–µ–º InputStream –∏–∑ ZipFile
              FileOutputStream fos = new FileOutputStream(entryFile)) {
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = is.read(buffer)) != -1) {
              fos.write(buffer, 0, bytesRead);
              extractedBytes += bytesRead;

              if (totalBytes > 0) {
                int currentProgress = (int) (extractedBytes * 100 / totalBytes);
                // –û—Ç–±–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 20% –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
                if (currentProgress / 20 > lastProgress / 20 || (extractedBytes == totalBytes && totalBytes > 0)) {
                  appendLog(getString(R.string.environment_unzip_progress, currentProgress));
                  lastProgress = currentProgress;
                }
              }
            }
          }
        }
      }
    }
  }


  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
   *
   * @param file –§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
   */
  private void deleteRecursive(File file) {
    if (!file.exists()) return;
    if (file.isDirectory()) {
      File[] children = file.listFiles();
      if (children != null) {
        for (File child : children) {
          deleteRecursive(child);
        }
      }
    }
    if (!file.delete()) {
      Log.w("MainActivity", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + file.getAbsolutePath());
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É yt-dlp.
   */
  private void executeYtDlp() {
    executorService.execute(() -> {
      File filesDir = getFilesDir();
      File envDir = new File(filesDir, ENV_NAME);
      File pythonExecutable = new File(envDir, PYTHON_PATH);
      File ffmpegExecutable = new File(envDir, FFMPEG_PATH);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Python-–æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ
      if (!pythonExecutable.exists() || !pythonExecutable.isFile() || !pythonExecutable.canExecute()) {
        appendLog(getString(R.string.environment_corrupted, ENV_VERSION));
        runOnUiThread(() -> {
          Toast.makeText(this, R.string.environment_corrupted_toast, Toast.LENGTH_LONG).show();
          nextButton.setEnabled(true);
        });
        return;
      }
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (!ffmpegExecutable.exists() || !ffmpegExecutable.isFile()) {
        appendLog(getString(R.string.ffmpeg_not_found_warning, ffmpegExecutable.getAbsolutePath()));
      }

      ProcessBuilder processBuilder = new ProcessBuilder();
      processBuilder.directory(envDir); // –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ - ytgui-env

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      processBuilder.environment().put("PREFIX", envDir.getAbsolutePath());
      processBuilder.environment().put("PATH", envDir.getAbsolutePath() + "/bin:" + System.getenv("PATH"));
      processBuilder.environment().put("LD_LIBRARY_PATH",
          new File(envDir, LD_LIBRARY_PATH).getAbsolutePath() + ":" + System.getenv("LD_LIBRARY_PATH"));

      List<String> command = new ArrayList<>();
      command.add(pythonExecutable.getAbsolutePath());
      command.add("-m");
      command.add("yt_dlp");

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
      if (ytDlpOptions != null) {
        command.addAll(ytDlpOptions);
      }

      Log.d("MainActivity", "Executing command: " + String.join(" ", command));
      appendLog("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: " + String.join(" ", command) + "\n");

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º StringBuilder –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ stderr, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ Toast
      StringBuilder errorOutput = new StringBuilder();

      try {
        Process process = processBuilder.command(command).start();

        // –ü–æ—Ç–æ–∫ –¥–ª—è stdout
        Thread stdoutReader = new Thread(() -> {
          try (InputStream inputStream = process.getInputStream();
              BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = reader.readLine()) != null) {
              appendLog(line);
            }
          } catch (IOException e) {
            Log.e("MainActivity", "Error reading stdout: " + e.getMessage(), e);
          }
        });

        // –ü–æ—Ç–æ–∫ –¥–ª—è stderr
        Thread stderrReader = new Thread(() -> {
          try (InputStream errorStream = process.getErrorStream();
              BufferedReader reader = new BufferedReader(new InputStreamReader(errorStream))) {
            String line;
            while ((line = reader.readLine()) != null) {
              appendLog(line);
              errorOutput.append(line).append("\n"); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–ª—è Toast
            }
          } catch (IOException e) {
            Log.e("MainActivity", "Error reading stderr: " + e.getMessage(), e);
          }
        });

        stdoutReader.start();
        stderrReader.start();

        int exitCode = process.waitFor();

        stdoutReader.join();
        stderrReader.join();

        if (exitCode == 0) {
          appendLog("\nyt-dlp –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ! ‚úÖ");
          Toast.makeText(this, R.string.download_complete_toast, Toast.LENGTH_LONG).show();
          // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
          moveDownloadedFiles();
        } else {
          String lastErrorLine = errorOutput.length() > 0 ? errorOutput.toString().trim()
              .split("\n")[errorOutput.toString().trim().split("\n").length - 1] : "";
          String errorMessage = String.format(getString(R.string.error_executing_yt_dlp),
              "–ö–æ–¥ –≤—ã—Ö–æ–¥–∞ " + exitCode + " (" + lastErrorLine + ")");
          appendLog("\n" + errorMessage);
          Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();
        }

      } catch (IOException | InterruptedException e) {
        String errorMessage = String.format(getString(R.string.error_executing_yt_dlp), e.getMessage());
        appendLog("\n" + errorMessage);
        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();
        Log.e("MainActivity", "Error executing yt-dlp", e);
      } finally {
        runOnUiThread(() -> nextButton.setEnabled(true));
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ (files/ytvideo –∏ files/ytaudio)
   * –≤ Documents/ytVideo –∏ Documents/ytAudio —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Scoped Storage.
   */
  private void moveDownloadedFiles() {
    executorService.execute(() -> {
      File filesDir = getFilesDir();

      // –¶–µ–ª–µ–≤—ã–µ –ø–∞–ø–∫–∏ –≤ Documents
      File documentsVideoDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS), "ytVideo");
      File documentsAudioDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS), "ytAudio");

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –æ—Ç–∫—É–¥–∞ —Å–∫–∞—á–∏–≤–∞–ª yt-dlp
      File tempVideoDir = new File(filesDir, "ytvideo");
      File tempAudioDir = new File(filesDir, "ytaudio");

      try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (!documentsVideoDir.exists()) {
          if (!documentsVideoDir.mkdirs()) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + documentsVideoDir.getAbsolutePath());
          }
        }
        if (!documentsAudioDir.exists()) {
          if (!documentsAudioDir.mkdirs()) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + documentsAudioDir.getAbsolutePath());
          }
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
        if (tempVideoDir.exists() && tempVideoDir.isDirectory()) {
          appendLog("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ " + tempVideoDir.getName() + " –≤ " + documentsVideoDir.getAbsolutePath() + "...");
          File[] videoFiles = tempVideoDir.listFiles();
          if (videoFiles != null) {
            for (File file : videoFiles) {
              moveFileOrDirectory(file, new File(documentsVideoDir, file.getName()));
              appendLog("–ü–µ—Ä–µ–º–µ—â–µ–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª/–ø–∞–ø–∫–∞: " + file.getName() + " ‚úÖ");
            }
          }
          deleteRecursive(tempVideoDir); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
          appendLog("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ –æ—á–∏—â–µ–Ω–∞. ‚úÖ");
        } else {
          appendLog("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞: " + tempVideoDir.getAbsolutePath());
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
        if (tempAudioDir.exists() && tempAudioDir.isDirectory()) {
          appendLog("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ " + tempAudioDir.getName() + " –≤ " + documentsAudioDir.getAbsolutePath() + "...");
          File[] audioFiles = tempAudioDir.listFiles();
          if (audioFiles != null) {
            for (File file : audioFiles) {
              moveFileOrDirectory(file, new File(documentsAudioDir, file.getName()));
              appendLog("–ü–µ—Ä–µ–º–µ—â–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª/–ø–∞–ø–∫–∞: " + file.getName() + " ‚úÖ");
            }
          }
          deleteRecursive(tempAudioDir); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
          appendLog("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω–∞. ‚úÖ");
        } else {
          appendLog("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞: " + tempAudioDir.getAbsolutePath());
        }

        appendLog("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ü•≥");

      } catch (IOException e) {
        appendLog("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: " + e.getMessage() + " üò≠");
        Log.e("MainActivity", "Error moving downloaded files: " + e.getMessage(), e);
      }
    });
  }


  /**
   * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –¥—Ä—É–≥–æ–µ.
   *
   * @param source –ò—Å—Ç–æ—á–Ω–∏–∫.
   * @param destination –¶–µ–ª—å.
   * @throws IOException –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞.
   */
  private void moveFileOrDirectory(File source, File destination) throws IOException {
    if (!source.exists()) return; // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    if (source.isDirectory()) {
      if (!destination.exists()) {
        if (!destination.mkdirs()) {
          throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + destination.getAbsolutePath());
        }
      }
      String[] children = source.list();
      if (children == null) { // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
        Log.w("MainActivity", "–ü—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " + source.getAbsolutePath());
        return;
      }
      for (String child : children) {
        moveFileOrDirectory(new File(source, child), new File(destination, child));
      }
      // –ù–µ —É–¥–∞–ª—è–µ–º source –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ moveDownloadedFiles –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –¥–µ—Ç–µ–π
    } else {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
      if (!source.renameTo(destination)) {
        // –ï—Å–ª–∏ renameTo –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö), –∫–æ–ø–∏—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º
        try (InputStream in = new FileInputStream(source);
            OutputStream out = new FileOutputStream(destination)) {
          byte[] buffer = new byte[4096];
          int length;
          while ((length = in.read(buffer)) > 0) {
            out.write(buffer, 0, length);
          }
        }
        if (!source.delete()) {
          Log.w("MainActivity",
              "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: " + source.getAbsolutePath());
        }
      }
    }
  }


  @Override
  protected void onDestroy() {
    super.onDestroy();
    executorService.shutdownNow(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ Activity
  }
}

