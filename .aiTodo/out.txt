= Общие настройки
Говори по-русски.

Девелоперская среда: исключительно Android, Termux, root права; никаких ПК (считай, что челлендж - написать всё на мобиле).

Юзерская среда: обычный Андроид 9+.

Отступы - 2 пробела, форматирование кода компактное (под мобильник 6").

Использовать верблюжью нотацию, если нет иной культуры в данном вопросе.

Проект: https://github.com/Luwerdwighime/ytgui

Окружение: https://github.com/Luwerdwighime/ytgui-env
Окружение собрано через pip, все зависимости yt-dlp установлены. Окружение у клиента обновляется через pull, сам клиент его не админит

Сборка на ГитХабе, на рабочем телефоне только код, ключи, конфиги, картинки.

Картинки я не рисую - бэкэндер, только стандартные или открытые источники.

Дизайн повозможности системный, в т.ч. картинки.

Название: org.nazarik.ytgui.

Полные пути в названиях файлов для комфортного копипаста.

Код пиши блоками, блоки комментируй, старайся сушить код и дважды не делать одну логическую операцию в разных файлах

Код полностью открытый, ключ лежит для галочки, про безопасность не паримся, кроме условий со стороны вендоров.

Все сисадминские операции (права доступа, настройки ГитХаба, подготовка окружения и заливка в ytgui-env на ГитХаб) уже закончены, всё проверено и протестировано.

Проект уже спроектирован, твоего анализа по архитектуре не нужно, тебе нужно полностью написать весь код, ни чего не пропуская, если ты чего-то забудешь, то билд нового кода не получится. Ты - машина, напротив тебя - машина (ГитХаб), всё, что ты написал он должен собрать без моего участия. YML можешь ознакомиться, полагаю его менять не нужно, остальной код и разметка - твои.

На иконку приложения поставь стандартную дискетку. Добавь право на интернет и запись в Documents.

Диз расписывается в xml, код в java. Стараемся избегать kotlin. Необходимые картинки, которые нужно нарисовать самому (отсутствуют стандартные) генерировать в xml. Все строки вынести в strings.xml для поддержки потенциального перевода на другие языки (однако, прямо сейчас в коде о языках не думаем).

Точка входа MainActivity, потом DownloadActivity, и дальше в главном цикле программы юзер гуляет между экранами загрузки и главным, где консоль, возвращается в загрузку и снова в консоль.

= MainActivity
На экране MainActivity хакерская текстовая арея на весь, свободный от кнопки экран, и снизу кнопка "Далее", которая станет активна только после успешного завершения операции, чтобы юзер переместился на DownloadActivity. Textarea поддерживает перемотку, всегда держится на нижней строке при любом изменении контента, поддерживает копирование в буффер

Код MainActivity работает в двух режимах. Если программа только запущена и параметров не передали, то пишем в нашу хакерскую консоль "Качаем yt-dlp... ~500Мб\n". Берём Jgit и качаем репу ytgui-env, получаем от него некие текста прогресса работы, пишем их в консоль. "Качаем" бывает разное: если в files отсутствует папка ytgui-env, то клонируем репу, если присутствует, то обновляем через pull (обновляем именно files/ytgui-env). Клонируем только с глубиной 1 только дефолтную ветку. Если пропала сеть, то мы не падаем, пишем извинительный тоаст и больше ничего не делаем - юзер нас сам перезапустит, когда ему нужно. Когда обновление окружения успешно завершено, светится кнопка "Далее"

Если получен параметр options, значит нас вызвал DownloadActivity. Он передал нам аналог std::string[] - это опции к yt-dlp. В этом режиме мы запускаем процесс yt-dlp (python -m) внутри скачанного ytgui-env. Нужно запустить команду и двумя потоками захватить stdout и stderr, и аккуратно последовательно без буфферизации лить строки из потоков в нашу хакерскую консоль. По завершении работы yt-dlp, кнопка "Далее" внизу экрана становится акивной, и юзер, после ознакомления с консолью, может вернуться на DownloadActivity. В случае ошибки yt-dlp мы не падаем, хватаем код возврата, последний stderr и (1) отпечатываем всё в консоли, (2) показываем тоаст с этим текстом

= DownloadActivity
Экран DownloadActivity показывает однострочное поле ввода "Введите URL" и кнопку с планшетом вставки из буффера. Снизу будет 4 кнопки и рядом с каждой  в одной строке маленькая кнопка с шестерёнкой. Шестерню пока не обрабатываем. Большие кнопки: скачать видео, скачать аудио, скачать видео плейлист, скачать аудио плейлист

Класс DownloadActivity обрабатывает кнопки, вставляет из буффера url. Если прожата одна из больших кнопок, то формируем массив строк - опции будующей команды yt-dlp. Пока это "--help", "1"/"2"/"3"/"4" и url для каждой, соответственно (результирующую команду показываем в тоасте). Итого, от второй кнопки приходит: "--help", "2" и "http...". Сформированный массив отправляем в MainActivity и сами переходим туда

..
├── README.md
├── app
│   ├── build.gradle
│   ├── keystore.jks
│   ├── proguard-rules.pro
│   └── src
│       └── main
│           ├── AndroidManifest.xml
│           ├── java
│           │   └── org
│           │       └── nazarik
│           │           └── ytgui
│           │               ├── DownloadActivity.java
│           │               └── MainActivity.java
│           └── res
│               ├── layout
│               │   ├── activity_download.xml
│               │   └── activity_main.xml
│               └── values
│                   ├── strings.xml
│                   ├── styles.xml
│                   └── themes.xml
├── build.gradle
├── gradle.properties
└── settings.gradle

11 directories, 15 files
