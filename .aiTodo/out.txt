= Общие настройки
Говори по-русски.

Девелоперская среда: исключительно Android, Termux, vim, root права; никаких ПК (считай, что челлендж - написать всё на мобиле).

Юзерская среда: обычный Андроид 9+, обычные права.

Отступы - 2 пробела, форматирование кода компактное (80 букв на строку - классика). Код пиши блоками, блоки комментируй, старайся сушить код и дважды не делать одну логическую операцию в разных файлах/блоках. Длинные функции можно разбивать, если это не порождает функцию в одну строку. Использовать верблюжью нотацию, если нет иной культуры в данном вопросе. Полные пути в названиях файлов для комфортного копипаста. Файлы присылать целиком, а не кусками.

Сборка на ГитХабе, на рабочем телефоне только код, ключи, конфиги, картинки. Картинки я не рисую - бэкэндер, только стандартные или открытые источники. Дизайн повозможности системный, в т.ч. картинки. На иконку приложения поставь стандартную дискетку. Не стесняйся немного солить интерфейс смайликами, наш юзер зачастую молод. Стандартный переход диза день/ночь.

Название: org.nazarik.ytgui.

Проект: https://github.com/Luwerdwighime/ytgui

Окружение: https://github.com/Luwerdwighime/ytgui-env
Окружение собрано: билд питона, ffmpeg, libffi, openssl из исходников, установка yt-dlp через pip, все зависимости yt-dlp[default] установлены. Окружение у клиента обновляется через скачку зипака при первом запуске, сам клиент его не админит.

Код полностью открытый, ключ лежит для галочки, про безопасность и авторские права не паримся, кроме условий со стороны вендоров. Мы - хакерский учебный опенсорс. Однако, билд релизный, и ключ должен быть указан в gradle. Оба пароля: 1234567, алиас: ytgui.

Все сисадминские операции (права доступа, настройки ГитХаба, подготовка окружения и заливка в ytgui-env на ГитХаб) уже закончены, всё проверено и протестировано.

Проект уже спроектирован, твоего анализа по архитектуре не нужно, тебе нужно полностью написать весь код, ни чего не пропуская, если ты чего-то забудешь, то билд нового кода не получится. Ты - машина, напротив тебя - машина (ГитХаб), всё, что ты написал он должен собрать без моего участия. YML можешь ознакомиться, полагаю его менять не нужно, остальной код и xml разметка - твои. Поскольку это уже 5-я переделка, то не забывай читать файлы из репы, если твой новый файл содержит меньше функционала, чем исходный, то я буду не доволен. Хотя, переписать ты можешь, я почитаю, но не деградируй решение.

Добавь право на интернет и запись в Documents.

Диз расписывается в xml, код в java. Попробуй использовать kotlin, интересно будет почитать. Необходимые картинки, которые нужно нарисовать самому (если отсутствуют стандартные) генерировать в xml. Все строки вынести в strings.xml для поддержки потенциального перевода на другие языки (однако, прямо сейчас в коде о языках не думаем).

Точка входа MainActivity, потом DownloadActivity, и дальше в главном цикле программы юзер гуляет между экранами загрузки и главным, где консоль, возвращается в загрузку и снова в консоль.

= MainActivity
На экране MainActivity хакерская текстовая арея на весь, свободный от кнопки экран, и снизу кнопка "Далее", которая станет активна только после успешного завершения операции, чтобы юзер переместился на DownloadActivity. Textarea поддерживает перемотку, всегда держится на нижней строке при любом изменении контента, поддерживает копирование в буффер.

Все логи и события внутри проги отдельным thread-ом льются в эту Textarea, logcat не юзаем, юзаем Textarea. Проливка потоков текста в Textarea должно осуществляться без буфферизации, например, всё что пишет yt-dlp, и stdout, и stderr должно непрерывно поступать в нашу консоль по мере вытекания из yt-dlp.

== MainActivity режим запуска
Код MainActivity работает в двух режимах. Если программа только запущена и параметров не передали (null), то пишем в нашу хакерскую консоль "Качаем yt-dlp [версия]... ~127Мб\n". Линк выглядит, например, так: https://github.com/Luwerdwighime/ytgui-env/archive/refs/tags/v1.4.0.zip . Единственная, изменяющаяся часть - версия, она должна быть в коде отдельной откомментированной константой, которая будет изменяться кодером от версии к версии. Тэги ГитХаба - это "v"+версия, имя зипака с "v", внутри зипака папка ytgui-env-версия (без "v"), не путайся. Пишем "Распаковка ytgui-env...", распаковываем зипак в files, получаем папку ytgui-env-версия, переименовываем в просто ytgui-env, удаляем зипак (вообще, не оставляем за собой мусор), устанавливаем бит выполнения на ytgui-env/bin/ffmpeg и ytgui-env/bin/python3.11. Когда установка окружения успешно завершена, пишем "ytgui-env установлен!" и светится кнопка "Далее".

== MainActivity режим закачки
Если получен параметр options, значит нас вызвал DownloadActivity. Он передал нам аналог std::string[] - это опции к yt-dlp, их может быть разное количество от 0 до ~10. В этом режиме мы запускаем процесс yt-dlp (как модуль, python -m) внутри скачанного окружения ytgui-env. Нужно запустить команду и отдельным потоком захватить stdout и stderr, аккуратно последовательно без буфферизации лить строки из потока в нашу хакерскую консоль (textarea). Требуется указать переменные окружения для работы внутри ytgui-env: PREFIX=/data/data/org.nazarik.ytgui/files/ytgui-env, PATH=$PREFIX/bin:$PATH, LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH

В качестве папки назначения используются: для видео и видеоплейлистов папка Documents/ytVideo, для аудио и аудиоплейлистов Documents/ytAudio. Для плейлистов запрашивается сохранение в виде папка-альбом/файл-трек. Documents - та самая, что в общем доступе на внутренней флешке, для которой запрашивался андроид доступ. Т.е. работаем внутри окружения, а сохраняем во вне, на /storage/emulated/0/...

Имей ввиду, что указание папки - это опция, которую добавляешь в массив ты. Её DownliadActivity должен был тебе сюда в MainActivity передать в зависимости от прожатой кнопки.

По завершении работы yt-dlp, кнопка "Далее" внизу экрана становится акивной, и юзер, после ознакомления с консолью, может вернуться на DownloadActivity. В случае ошибки yt-dlp мы не падаем, хватаем код возврата, последнюю строку из stderr и (1) отпечатываем всё в консоли, (2) показываем тоаст с этим текстом (зацепим внимание юзера, чтобы копипастил ошибку из textarea в чат суппорту).

Когда мы входим в режим закачки, то зипак уже считается скачанным. Если файл ytgui-env/bin/python3.11 отсутствует, то мы пишем в консоль "Окружение [версия] повреждено. Требуется переустановка этой программы" и дальше ничего не делаем

= DownloadActivity
Экран DownloadActivity показывает однострочное поле ввода "Введите URL" и кнопку с планшетом вставки из буффера, поле ввода и кнопка на одной строке. Снизу будет 4 кнопки и рядом с каждой в той же строке маленькая кнопка с шестерёнкой. Большие кнопки: "Скачать видео", "Скачать аудио", "Скачать видео плейлист", "Скачать аудио плейлист". При попытке нажать одну из больших кнопок без ввода URL, светится тоаст "Введите URL".

По нажатии на шестерню появляется всплывающее окно "Опции" (для каждой большой кнопки они свои). У "Скачать видео" есть две галочки "bestvideo" и "bestaudio", поумолчанию обе выключены. У "Скачать аудио" одна галочка "bestaudio", выключена. У "Скачать аудиоплейлист" и "Скачать видеоплейлист", соответственно, две и одна галочка, поумолчанию выключены. В окне опций видеокнопок (видео и видеоплейлист, там где по две галочки) есть информационная строка (смайлик "внимание") "bestvideo+bestaudio может качать по 2 файла на один трек" (это нормально, но кушает трафик, юзер выходит из умолчания, отдавая себе отчёт о расходах).

Класс DownloadActivity обрабатывает кнопки, вставляет из буффера url. Имеет приватные переменные для хранения флагов, устанавливаемых через всплывающие окошки шестерёнок для каждой из больших кнопок. Если прожата одна из больших кнопок, то формируем массив строк - опции будующей команды yt-dlp. Для первой кнопки, как уже понятно, можно включать или нет формат bestvideo+bestaudio или его градации, для второй выбор только с bestaudio или без. Третья, добавить опцию плейлиста и смотреть на галочки bestvideo+bestaudio. Четвёртая кнопка - плейлист и, возможно, bestaudio. Т.е. мы прямым текстом запросили у юзера насколько много трафика и cpu он готов потратить через галочки форматов, поумолчанию все галочки сняты (т.е. у первой кнопки нулевое число опций в массиве для MainActivity, если не считать URL). Последней строкой опций всегда идёт URL из поля текстового ввода. Сформированный массив отправляем в MainActivity и сами переходим туда.

..
├── README.md
├── app
│   ├── build.gradle
│   ├── keystore.jks
│   ├── proguard-rules.pro
│   └── src
│       └── main
│           ├── AndroidManifest.xml
│           ├── java
│           │   └── org
│           │       └── nazarik
│           │           └── ytgui
│           │               ├── DownloadActivity.java
│           │               └── MainActivity.java
│           └── res
│               ├── drawable
│               │   ├── button_selector.xml
│               │   └── ic_launcher_diskette.xml
│               ├── layout
│               │   ├── activity_download.xml
│               │   └── activity_main.xml
│               └── values
│                   ├── colors.xml
│                   ├── strings.xml
│                   ├── styles.xml
│                   └── themes.xml
├── build.gradle
├── gradle.properties
└── settings.gradle

12 directories, 18 files
